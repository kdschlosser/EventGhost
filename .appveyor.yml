# In AppVeyor's web config add an enviremont variable named GITHUB_TOKEN.
# Set it to a token you've created on GitHub.
# To draft a release on GitHub with AppVeyor, create a tag on master.


image: Visual Studio 2017
version: '{build}-{branch}'


#init:
#  # Enable Remotedesktop and pause the build execution
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))


matrix:
  fast_finish: true


cache:
    # Invalidate cache if .appveyor.yml has changed
    - C:\Stackless27 -> .appveyor.yml
    - C:\Stackless27x64 -> .appveyor.yml
    # Manually clear cache:
    # from agithub.AppVeyor import AppVeyor
    # ci = AppVeyor(<your appveyor API token>)
    # status, data = ci.api.projects.<appveyor username>.<appveyor projectname>.buildcache.delete()
    # print status  # 204 = Ok, cache deleted


install:
    # HTML Help Workshop 1.32
    # - cinst html-help-workshop

    # Microsoft Visual C++ Redistributable 2008 (version min: 9.0.21022.8)
    # - cinst vcredist2008

    #- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
    - ps: |
        $PythonX86 = 'C:\Stackless27'
        $PythonPathX86 = 'C:\Stackless27;C:\Stackless27\Scripts;C:\Stackless27\DLLs;C:\Stackless27\Lib;C:\Stackless27\Lib\site-packages;'
        $PythonScriptsX86 = $PythonX86 + "\Scripts"
        $SitePackagesX86 = $PythonX86 + "\lib\site-packages"
        $PythonDLLX86 = $PythonX86 + "\python27.dll"
        $PathX86 = $PythonPathX86 + $Env:PATH

        $PythonX64 = 'C:\Stackless27x64'
        $PythonPathX64 = 'C:\Stackless27x64;C:\Stackless27x64\Scripts;C:\Stackless27x64\DLLs;C:\Stackless27x64\Lib;C:\Stackless27x64\Lib\site-packages;'
        $PythonScriptsX64 = $PythonX64 + "\Scripts"
        $SitePackagesX64 = $PythonX64 + "\lib\site-packages"
        $PythonDLLX64 = $PythonX64 + "\python27.dll"
        $PathX64 = $PythonPathX64 + $Env:PATH

        $SysWOW = $Env:SYSTEMROOT + "\SysWOW64"
        $PythonWindowsDLL = $SysWOW + "\python27.dll"

        Remove-Item $PythonWindowsDLL
        " "
        "=============== prepare EventGhost build environment ==============="
        If (-not (Test-Path $PythonX86)) {
            Function PipInstall ($msg, $mod) {
                " "
                "--- " + $msg
                "    Installing..."
                pip install -q $mod
                "    Done."
            }
            $InstallersFolder = $Env:APPVEYOR_BUILD_FOLDER + "\_build\installers\"
            New-Item $InstallersFolder -type directory | Out-Null

            $StacklessInstallerX86 = $InstallersFolder + "python-2.7.12150-stackless.msi"
            $StacklessURLX86 = "http://www.stackless.com/binaries/python-2.7.12150-stackless.msi"

            $StacklessInstallerX64 = $InstallersFolder + "python-2.7.12150.amd64-stackless.msi"
            $StacklessURLX64 = "http://www.stackless.com/binaries/python-2.7.12150.amd64-stackless.msi"

            $WXInstallerX86 = $InstallersFolder + "wxPython3.0-win32-3.0.2.0-py27.exe"
            $WXURLX86 = "http://downloads.sourceforge.net/wxpython/wxPython3.0-win32-3.0.2.0-py27.exe"
            $WXInstallerX64 = $InstallersFolder + "wxPython3.0-win64-3.0.2.0-py27.exe"
            $WXURLX64 = "http://downloads.sourceforge.net/wxpython/wxPython3.0-win64-3.0.2.0-py27.exe"


            Start-FileDownload $StacklessURLX86 -Timeout 60000 -FileName $StacklessInstallerX86
            Start-FileDownload $StacklessURLX64 -Timeout 60000 -FileName $StacklessInstallerX64

            Start-FileDownload $WXURLX86 -Timeout 60000 -FileName $WXInstallerX86
            Start-FileDownload $WXURLX64 -Timeout 60000 -FileName $WXInstallerX64

            $Env:PYTHON = $PythonX86
            $Env:PYTHONPATH = $PythonPathX86
            $Env:PATH = $PathX86

            "Installing Stackless 2.7.12150 x86"
            Start-Process MsiExec.exe -Arg "/I $StacklessInstallerX86 /quiet /passive /qn /norestart TARGETDIR=$PythonX86" -Wait
            "Done."
            " "
            "Installing wxPython 3.0.2.0 x86"
            Start-Process $WXInstallerX86 -Arg "/VERYSILENT /SUPPRESSMSGBOXES" -NoNewWindow -Wait
            "Done"
            " "
            "--- pip 9.0.1 x86"
            "    Updating..."
            python -m pip install -q -U "pip==9.0.1"
            "    Done."
            " "
            "--- setuptools 40.4.3 x86"
            "    Updating..."
            pip install -q -U "setuptools==40.4.3"
            "    Done."

            PipInstall "wheel 0.29.0 x86" "wheel==0.29.0"
            # sphinx >= 1.4.9 installs jinja2 >= 2.3 as dependency,
            # jinja2 >= 2.9 has an async module which py2exe has
            # problems with (build of eg will fail)
            PipInstall "jinja2 2.8.1 x86" "jinja2==2.8.1"
            PipInstall "sphinx 1.5.6 x86" "sphinx==1.5.6"
            PipInstall "commonmark 0.7.3 x86" "commonmark==0.7.3"
            PipInstall "pillow 3.4.2 x86" "pillow==3.4.2"
            PipInstall "py2exe 0.6.9 x86" "py2exe_py2==0.6.9"
            PipInstall "pycrypto 2.6.1 x86" "pycrypto==2.6.1"
            PipInstall "comtypes 1.1.3 x86" "https://github.com/enthought/comtypes/archive/1.1.3.zip"
            PipInstall "ctypeslib 0.5.6 x86" "svn+http://svn.python.org/projects/ctypes/trunk/ctypeslib/#ctypeslib=0.5.6"
            PipInstall "paramiko 2.2.1 x86" "paramiko==2.2.1"
            PipInstall "pywin32 223 x86" pywin32==223


            $Env:PYTHON = $PythonX64
            $Env:PYTHONPATH = $PythonPathX64
            $Env:PATH = $PathX64

            "Installing Stackless 2.7.12150 x64"
            Start-Process MsiExec.exe -Arg "/I $StacklessInstallerX64 /quiet /passive /qn /norestart TARGETDIR=$PythonX64" -Wait
            "Done."
            " "
            "Installing wxPython 3.0.2.0 x64"
            Start-Process $WXInstallerX86 -Arg "/VERYSILENT /SUPPRESSMSGBOXES" -NoNewWindow -Wait
            "Done"

            " "
            "--- pip 9.0.1 x64"
            "    Updating..."
            python -m pip install -q -U "pip==9.0.1"
            "    Done."
            " "
            "--- setuptools 40.4.3 x64"
            "    Updating..."
            pip install -q -U "setuptools==40.4.3"
            "    Done."

            PipInstall "wheel 0.29.0 x64" "wheel==0.29.0"
            # sphinx >= 1.4.9 installs jinja2 >= 2.3 as dependency,
            # jinja2 >= 2.9 has an async module which py2exe has
            # problems with (build of eg will fail)
            PipInstall "jinja2 2.8.1 x64" "jinja2==2.8.1"
            PipInstall "sphinx 1.5.6 x64" "sphinx==1.5.6"
            PipInstall "commonmark 0.7.3 x64" "commonmark==0.7.3"
            PipInstall "pillow 3.4.2 x64" "pillow==3.4.2"
            PipInstall "py2exe 0.6.9 x64" "py2exe_py2==0.6.9"
            PipInstall "pycrypto 2.6.1 x64" "pycrypto==2.6.1"
            PipInstall "comtypes 1.1.3 x64" "https://github.com/enthought/comtypes/archive/1.1.3.zip"
            PipInstall "ctypeslib 0.5.6 x64" "svn+http://svn.python.org/projects/ctypes/trunk/ctypeslib/#ctypeslib=0.5.6"
            PipInstall "paramiko 2.2.1 x64" "paramiko==2.2.1"
            PipInstall "pywin32 223 x64" pywin32==223
        }

        $Env:PythonX86 = $PythonX86
        $Env:PythonPathX86 = $PythonPathX86
        $Env:PathX86 = $PathX86

        $Env:PythonX64 = $PythonX64
        $Env:PythonPathX64 = $PythonPathX64
        $Env:PathX64 = $PathX64

build_script:
    ps: |
        "=============== start the EventGhost build ==============="
        " "

        $BuildArgs = "--build --package"
        If ($Env:APPVEYOR_REPO_TAG.tolower() -eq "true" -and $Env:APPVEYOR_REPO_TAG_NAME.tolower().startswith("deploy")) {
            # to do a release, create a tag in the form "Deploy_VERSION"
            # VERSION must be a valid version string (without leading 'v')
            # this tag will be deleted and a new release "vVERSION" created.
            git checkout -q master
            $release = $Env:APPVEYOR_REPO_TAG_NAME.split("_", 2)[1]
            $url = if($Env:SFTP_URL){' --docs --url "' + $env:SFTP_URL + '"'} else {''}

            $BuildArgs = "--build --package --release --version $release $url"
        }

        $Env:PYTHON = $Env:PythonX86
        $Env:PYTHONPATH = $Env:PythonPathX86
        $Env:PATH = $Env:PathX86
        python "_build\Build.py" $BuildArgs
        $Env:SetupExeX86 = gci -recurse -filter "_build\output\*Setup.exe" -name


        $Env:PYTHON = $Env:PythonX64
        $Env:PYTHONPATH = $Env:PythonPathX64
        $Env:PATH = $Env:PathX64
        python "_build\Build.py" $BuildArgs
        $Env:SetupExeX64 = gci -recurse -filter "_build\output\*Setupx64.exe" -name

        # update the appveyor build version to be the same as the EventGhost version
        $start = $env:SetupExeX86.IndexOf("_")
        $length = $env:SetupExeX86.LastIndexOf("_") - $start
        $build_version = $env:SetupExeX86.Substring($start + 1, $length - 1)
        Update-AppveyorBuild -Version "$build_version"

        # Make sure the appveyor cache is only saved if our build was successfull
        If (-Not (Test-Path(".\EventGhost.exe"))) {$env:APPVEYOR_CACHE_SKIP_SAVE = "true"}

        " "

        "=============== EventGhost build finished ==============="
        " "
        " "

#after_test:
#  - cmd:  echo "=============== EventGhost build finished ==============="
#  # - cmd: START /WAIT %setup-exe% /VERYSILENT /SUPPRESSMSGBOXES /NOCLOSEAPPLICATIONS


artifacts:
    - path: _build\output\$(SetupExeX86)
      name: $(SetupExeX86)
    - path: _build\output\$(SetupExeX64)
      name: $(SetupExeX64)
    - path: _build\output\Build_x86.log
      name: Build_x86.log
    - path: _build\output\Build_x64.log
      name: Build_x64.log
    - path: _build\output\CHANGELOG.md
      name: CHANGELOG.md
    - path: _build\output\CHANGELOG_THIS_RELEASE.md
      name: CHANGELOG_THIS_RELEASE.md
    - path: _build\output\CHANGELOG_THIS_RELEASE.bb
      name: CHANGELOG_THIS_RELEASE.bb



notifications:
- provider: GitHubPullRequest
  template: >-
    [{{buildVersion}} {{status}}]({{buildUrl}}) (commit {{commitUrl}})

    Artifacts:

    {{#jobs}}
    {{#artifacts}}
    [{{name}}]({{permalink}})

    {{/artifacts}}
    {{/jobs}}

  on_build_success: true
  on_build_failure: true
  on_build_status_changed: false

- provider: Slack
  incoming_webhook:
    secure: DXo21MuJufndeGjaRDMxLgLo5yEaPf9uYg1YqrHPlfjsXUAzxRR2yGhCKcUwfLTT3gO192GKwkNAc52Y6TnxuKsNAgI+K5mBW40+6I9FOmU=

  template: >-
    <{{buildUrl}}|{{projectName}} {{buildVersion}} {{status}}>

    Commit <{{commitUrl}}|{{commitId}}> by {{commitAuthor}} on {{commitDate}}:

    Commit message: _{{commitMessage}}_


    Artifacts:

    {{#jobs}}{{#artifacts}}<{{permalink}}|{{name}}>

    {{/artifacts}}{{/jobs}}

  on_build_success: true
  on_build_failure: true
  on_build_status_changed: true



#on_finish:
#  # Enable Remotedesktop and pause the build execution
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))


# notifications:
#   - provider: GitHubPullRequest
#     template: "{{#passed}}:white_check_mark: [Setup.exe](https://ci.appveyor.com/api/buildjobs/$(APPVEYOR_JOB_ID)/artifacts/_build%2Foutput%2F$(setup-exe)){{/passed}}{{#failed}}:x:{{/failed}} [Build {{&projectName}} {{buildVersion}} {{status}}]({{buildUrl}}) (commit {{commitUrl}} by @{{&commitAuthorUsername}})"
