# In AppVeyor's web config add an enviremont variable named GITHUB_TOKEN.
# Set it to a token you've created on GitHub.
# To draft a release on GitHub with AppVeyor, create a tag on master.


image: Visual Studio 2017
version: '{build}-{branch}'


#init:
#  # Enable Remotedesktop and pause the build execution
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))


matrix:
  fast_finish: true


cache:
    # Invalidate cache if .appveyor.yml has changed
    - C:\Stackless27 -> .appveyor.yml
    - C:\Stackless27x64 -> .appveyor.yml
    # Manually clear cache:
    # from agithub.AppVeyor import AppVeyor
    # ci = AppVeyor(<your appveyor API token>)
    # status, data = ci.api.projects.<appveyor username>.<appveyor projectname>.buildcache.delete()
    # print status  # 204 = Ok, cache deleted


install:
    # HTML Help Workshop 1.32
    # - cinst html-help-workshop

    # Microsoft Visual C++ Redistributable 2008 (version min: 9.0.21022.8)
    # - cinst vcredist2008

    #- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
    - ps: |
        $Python_x86 = 'C:\Stackless27'
        $PythonPath_x86 = 'C:\Stackless27;C:\Stackless27\Scripts;C:\Stackless27\DLLs;C:\Stackless27\Lib;C:\Stackless27\Lib\site-packages;'
        $PythonScripts_x86 = $Python_x86 + "\Scripts"
        $SitePackages_x86 = $Python_x86 + "\lib\site-packages"
        $PythonDLL_x86 = $Python_x86 + "\python27.dll"
        $Path_x86 = $PythonPath_x86 + $Env:PATH

        $Python_x64: 'C:\Stackless27x64'
        $PythonPath_x64: 'C:\Stackless27x64;C:\Stackless27x64\Scripts;C:\Stackless27x64\DLLs;C:\Stackless27x64\Lib;C:\Stackless27x64\Lib\site-packages;'
        $PythonScripts_x64 = $Python_x64 + "\Scripts"
        $SitePackages_x64 = $Python_x64 + "\lib\site-packages"
        $PythonDLL_x64 = $Python_x64 + "\python27.dll"
        $Path_x64 = $PythonPath_x64 + $Env:PATH

        $SysWOW = $Env:SYSTEMROOT + "\SysWOW64"
        $PythonWindowsDLL = $SysWOW + "\python27.dll"

        Remove-Item $PythonWindowsDLL
        " "
        "=============== prepare EventGhost build environment ==============="
        If (-not (Test-Path $PythonFolder)) {
            $InstallersFolder = $Env:APPVEYOR_BUILD_FOLDER + "\_build\installers\"
            New-Item $InstallersFolder -type directory | Out-Null

            $StacklessInstallerx86 = $InstallersFolder + "python-2.7.12150-stackless.msi"
            $StacklessURLx86 = "http://www.stackless.com/binaries/python-2.7.12150-stackless.msi"

            $StacklessInstallerx64 = $InstallersFolder + "python-2.7.12150.amd64-stackless.msi"
            $StacklessURLx64 = "http://www.stackless.com/binaries/python-2.7.12150.amd64-stackless.msi"

            $WXInstaller = $InstallersFolder + "wxPython3.0-win32-3.0.2.0-py27.exe"
            $WXURL = "http://downloads.sourceforge.net/wxpython/wxPython3.0-win32-3.0.2.0-py27.exe"

            Start-FileDownload $StacklessURLx86 -Timeout 60000 -FileName $StacklessInstallerx86
            Start-FileDownload $StacklessURLx64 -Timeout 60000 -FileName $StacklessInstallerx64
            Start-FileDownload $WXURL -Timeout 60000 -FileName $WXInstaller

            "Installing Stackless 2.7.12150 x86"
            Start-Process MsiExec.exe -Arg "/I TARGETDIR=$Python_x86 /quiet /passive /qn /norestart $StacklessInstallerx86" -Wait
            "Done."
            " "

            "Installing Stackless 2.7.12150 x64"
            Start-Process MsiExec.exe -Arg "/I TARGETDIR=$Python_x64 /quiet /passive /qn /norestart $StacklessInstallerx64" -Wait
            "Done."
            " "

            Function RunInstallers () {
                Function PipInstall ($msg, $mod) {
                    " "
                    "--- " + $msg
                    "    Installing..."
                    pip install -q $mod
                    "    Done."
                }

                "Installing wxPython 3.0.2.0"
                $WXInstall = $Env:APPVEYOR_BUILD_FOLDER + "\_build\installers\wxPython3.0-win32-3.0.2.0-py27.exe"

                Start-Process $WXInstall -Arg "/VERYSILENT /SUPPRESSMSGBOXES" -NoNewWindow -Wait
                "Done"
                " "

                "--- pip 9.0.1"
                "    Updating..."
                python -m pip install -q -U "pip==9.0.1"
                "    Done."
                " "
                "--- setuptools 34.3.0"
                "    Updating..."
                pip install -q -U "setuptools==40.4.3"
                "    Done."

                PipInstall "wheel 0.29.0" "wheel==0.29.0"
                # sphinx >= 1.4.9 installs jinja2 >= 2.3 as dependency,
                # jinja2 >= 2.9 has an async module which py2exe has
                # problems with (build of eg will fail)
                PipInstall "jinja2 2.8.1" "jinja2==2.8.1"
                PipInstall "sphinx 1.5.6" "sphinx==1.5.6"
                PipInstall "commonmark 0.7.3" "commonmark==0.7.3"
                PipInstall "pillow 3.4.2" "pillow==3.4.2"
                PipInstall "py2exe 0.6.9" "py2exe_py2==0.6.9"
                PipInstall "pycrypto 2.6.1" "pycrypto==2.6.1"
                PipInstall "comtypes 1.1.3" "https://github.com/enthought/comtypes/archive/1.1.3.zip"
                PipInstall "ctypeslib 0.5.6" "svn+http://svn.python.org/projects/ctypes/trunk/ctypeslib/#ctypeslib=0.5.6"
                PipInstall "paramiko 2.2.1" "paramiko==2.2.1"
                PipInstall "pywin32 223" pywin32==223
            }

            $Env:PYTHON = $Python_x86
            $Env:PYTHONPATH = $PythonPath_x86
            $Env:PATH = $Path_x86
            RunInstallers

            $Env:PYTHON = $Python_x64
            $Env:PYTHONPATH = $PythonPath_x64
            $Env:PATH = $Path_x64
            RunInstallers

            $Env:Python_x86 = $Python_x86
            $Env:PythonPath_x86 = $PythonPath_x86
            $Env:Path_x86 = $Path_x86

            $Env:Python_x64 = $Python_x64
            $Env:PythonPath_x64 = $PythonPath_x64
            $Env:Path_x64 = $Path_x64
        }

build_script:
    ps: |
        "=============== start the EventGhost build ==============="
        " "

        $BuildArgs = "--build --package"
        If ($Env:APPVEYOR_REPO_TAG.tolower() -eq "true" -and $Env:APPVEYOR_REPO_TAG_NAME.tolower().startswith("deploy")) {
            # to do a release, create a tag in the form "Deploy_VERSION"
            # VERSION must be a valid version string (without leading 'v')
            # this tag will be deleted and a new release "vVERSION" created.
            git checkout -q master
            $release = $Env:APPVEYOR_REPO_TAG_NAME.split("_", 2)[1]
            $url = if($Env:SFTP_URL){' --docs --url "' + $env:SFTP_URL + '"'} else {''}

            $BuildArgs = "--build --package --release --version $release $url"

        $Env:PYTHON = $Env:Python_x86
        $Env:PYTHONPATH = $Env:PythonPath_x86
        $Env:PATH = $Env:Path_x86
        python "_build\Build.py" $BuildArgs
        $Env:SetupExe_x86 = gci -recurse -filter "_build\output\*Setup.exe" -name


        $Env:PYTHON = $Env:Python_x64
        $Env:PYTHONPATH = $Env:PythonPath_x64
        $Env:PATH = $Env:Path_x64
        python "_build\Build.py" $BuildArgs
        $Env:SetupExe_x64 = gci -recurse -filter "_build\output\*Setupx64.exe" -name

        # update the appveyor build version to be the same as the EventGhost version
        $start = $env:SetupExe_x86.IndexOf("_")
        $length = $env:SetupExe_x86.LastIndexOf("_") - $start
        $build_version = $env:SetupExe_x86.Substring($start + 1, $length - 1)
        Update-AppveyorBuild -Version "$build_version"

        # Make sure the appveyor cache is only saved if our build was successfull
        If (-Not (Test-Path(".\EventGhost.exe"))) {$env:APPVEYOR_CACHE_SKIP_SAVE = "true"}

        " "

        "=============== EventGhost build finished ==============="
        " "
        " "

#after_test:
#  - cmd:  echo "=============== EventGhost build finished ==============="
#  # - cmd: START /WAIT %setup-exe% /VERYSILENT /SUPPRESSMSGBOXES /NOCLOSEAPPLICATIONS


artifacts:
    - path: _build\output\$(SetupExe_x86)
      name: $(SetupExe_x86)
    - path: _build\output\$(SetupExe_x64)
      name: $(SetupExe_x64)
    - path: _build\output\Build_x86.log
      name: Build_x86.log
    - path: _build\output\Build_x64.log
      name: Build_x64.log
    - path: _build\output\CHANGELOG.md
      name: CHANGELOG.md
    - path: _build\output\CHANGELOG_THIS_RELEASE.md
      name: CHANGELOG_THIS_RELEASE.md
    - path: _build\output\CHANGELOG_THIS_RELEASE.bb
      name: CHANGELOG_THIS_RELEASE.bb


notifications:
    - provider: GitHubPullRequest
      template: >-
        [{{buildVersion}} {{status}}]({{buildUrl}}) (commit {{commitUrl}})

      Artifacts:

        {{#jobs}}
        {{#artifacts}}
        [{{name}}]({{permalink}})

        {{/artifacts}}
        {{/jobs}}

      on_build_success: true
      on_build_failure: true
      on_build_status_changed: false

    - provider: Slack
      incoming_webhook:
      secure: DXo21MuJufndeGjaRDMxLgLo5yEaPf9uYg1YqrHPlfjsXUAzxRR2yGhCKcUwfLTT3gO192GKwkNAc52Y6TnxuKsNAgI+K5mBW40+6I9FOmU=

      template: >-
        <{{buildUrl}}|{{projectName}} {{buildVersion}} {{status}}>

      Commit <{{commitUrl}}|{{commitId}}> by {{commitAuthor}} on {{commitDate}}:

      Commit message: _{{commitMessage}}_


      Artifacts:

        {{#jobs}}{{#artifacts}}<{{permalink}}|{{name}}>

        {{/artifacts}}{{/jobs}}

      on_build_success: true
      on_build_failure: true
      on_build_status_changed: true



#on_finish:
#  # Enable Remotedesktop and pause the build execution
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))


# notifications:
#   - provider: GitHubPullRequest
#     template: "{{#passed}}:white_check_mark: [Setup.exe](https://ci.appveyor.com/api/buildjobs/$(APPVEYOR_JOB_ID)/artifacts/_build%2Foutput%2F$(setup-exe)){{/passed}}{{#failed}}:x:{{/failed}} [Build {{&projectName}} {{buildVersion}} {{status}}]({{buildUrl}}) (commit {{commitUrl}} by @{{&commitAuthorUsername}})"
