# In AppVeyor's web config add an enviremont variable named GITHUB_TOKEN.
# Set it to a token you've created on GitHub.
# To draft a release on GitHub with AppVeyor, create a tag on master.


# *****************************************************************************
# *                                                                           *
# *                              READ ME!!!                                   *
# *                                                                           *
# *****************************************************************************
#
#
# =============================== PROBLEMS ====================================
#
# python <3 - C-Python or Stackless you can only have a single copy
#             of that version of python installed on a machine. The issue with
#             the installer is that it does not launch the uninstaller for the
#             version that is already installed. It simply iterates the
#             installation folder and deletes the files for the currently
#             installed version. It does this without ever telling you that it
#             is and it does not do a CRC check against the installed files
#             before removing them. So if you have any modified core python
#             files be warned.. It does not care. It will delete them without
#             notice.
#
#             The big problem with this process is that it does not remove
#             any entries in the registry for the old installation. and it
#             adds entries for the new installation below them. This causes
#             any installers that do a search for python installations to
#             always select the wrong one. Now under normal situations an
#             installer would iterate the list of possible installations and
#             verify if it is there or not.. But because Python 2.7 is only
#             supposed to have a single installed copy why would the author
#             do this?? They wouldn't. they would rely on there being only a
#             single installation listed in the registry.
#
# py2xe_py2 - does not have a pypi dist available for python 2.7 x64
#             so for sake of keeping the code symmetrical both the x86 and x64
#             use the executable that gets downloaded.
#             the installer for py2exe_py2 does not detect installed python
#             version properly because of the bug mentioned above.
#
#
# x86 - x64 - The second portion of the multiple Python 2.7 installations
#             dilemma. we need to install an x86 and an x64 variant at the
#             same time. I know there is a way to have the appveyor build run
#             2 times. I have not investigated this fully as of yet.
#
#
# ========================== SOLUTIONS / HACKS ================================
#
# py2xe_py2 - this is a fix for the above issue.
#             since the executable was created using distutils we can use
#             easy_install to install the library. There is a single glitch
#             with it There is some kind of a warning/error that gets printed
#             out. Tho it does not affect the installation it does produce the
#             undesirable red in the powershell log.
#
# x86 - x64 - How we get around this is we relocate the python installations
#             after installing everything needed. we also move the python dll
#             file from SysWOW or System to the installations folder.
#             we do not want an entry in the registry pointing to a current
#             python installation that we intend to use. When we install the
#             second variant if the first is found it will be deleted. So we
#             have to play a little bit of hide and seek with the python
#             installations. That is why you will see all of the moving and
#             copying of files.
#
#
# =============================== CHANGES =====================================
#
# *REMOVED*
# ctypeslib - This is a non functioning package due to
#             components that are required by the library and are no longer
#             available. The only thing this module was ever used for was the
#             creation of eg.WinApi.Dynamic module.
#             Microsoft has not changed any of the API for any of the
#             constants/functions located in this file since their creation in
#             Windows XP. I do not forsee them making any changes because of
#             how long this API has been in place. So the need for ctypeslib
#             (even if it did function) is no longer needed.
# *REMOVED*
# pycrypto  - this library is no longer being maintained. has been replaced
#
# *ADDED*
# pycryptodome - pycrypto replacement. most of the same API. It is a maintained
#                fork of pycrypto
#
# *MOVED*
# build process - I moved the building of EG out of the install section of
#                 appveyor. I did this because of the incorrect build
#                 completion notifications. There is a build_script section
#                 that can be used in replacement of build. this section
#                 does not do a VS solution scan and it also properly reports
#                 the status of the build. the install section is not monitored
#                 for application status codes properly. and the use of
#                 fast_finish i believe only works on the build/build_script
#                 sections
#
#
# *****************************************************************************
# *****************************************************************************

image:
    - Visual Studio 2017

platform:
  - x86
  - x64

version: '{build}-{branch}'

environment:
    global:
        INSTALLSCRIPT: '
if (-Not (Test-Path $Env:PYTHON)) {
    $PythonDLL = $Env:SYSTEMROOT + $Env:PYTHONDLL

    If (Test-Path $PythonDLL) {
        Remove-Item $PythonDLL
    }

    $InstallersFolder = $Env:APPVEYOR_BUILD_FOLDER + "\_build\installers\"
    if (-Not(Test-Path $InstallersFolder)) {
        New-Item $InstallersFolder -type directory | Out-Null

        # I am using the VS 2017 appveyor image and this is not installed
        # with that image. It is needed to compile the crypto library
        $VCInstaller = $InstallersFolder + "VCForPython27.msi"
        $VCURL = "https://download.microsoft.com/download/7/9/6/796EF2E4-801B-4FC4-AB28-B59FBF6D907B/VCForPython27.msi"
        Start-FileDownload $VCURL -Timeout 60000 -FileName $VCInstaller
        "  ---- Installing Visual C Compiler for Python 2.7"
        Start-Process MsiExec.exe -Arg "/I $VCInstaller /quiet /passive /qn /norestart" -Wait
        "       Done."
        " "
    }

    $StacklessInstaller = $InstallersFolder + $Env:STACKLESSINSTALLER
    $StacklessURL = "http://www.stackless.com/binaries/$Env:STACKLESSINSTALLER"

    $WXInstaller = $InstallersFolder + + $Env:WXINSTALLER
    $WXURL = "http://downloads.sourceforge.net/wxpython/$Env:WXINSTALLER"

    $Py2ExeInstaller = $InstallersFolder + $Env:PY2EXEINSTALLER
    $Py2ExeURL = "https://sourceforge.net/projects/py2exe/files/py2exe/0.6.9/$Env:PY2EXEINSTALLER"

    $SitePackages = "$Env:PYTHON\Lib\site-packages"

    Function PipInstall ($msg, $mod) {
        "  ---- Installing " + $msg
        pip install --no-cache-dir -q $mod
        "       Done."
    }

    "==================== Downloading Files ==================="

    Start-FileDownload $StacklessURL -Timeout 60000 -FileName $StacklessInstaller
    Start-FileDownload $WXURL -Timeout 60000 -FileName $WXInstaller
    Start-FileDownload $Py2ExeURL -Timeout 60000 -FileName $Py2ExeInstaller

    " "
    "=============== Installing Requirements =============="

    "  ---- Installing Stackless 2.7.12150"
    Start-Process MsiExec.exe -Arg "/I $StacklessInstaller /quiet /passive /qn /norestart TARGETDIR=$Env:PYTHON" -Wait
    "       Done."

    "  ---- Upgrading pip 9.0.1"
    python -m pip install --no-cache-dir -q -U "pip==9.0.1"
    "       Done."

    "  ---- Upgrading setuptools 40.0.0"
    pip install --no-cache-dir -q -U "setuptools==40.2.0"
    "       Done."

    "  ---- Installing wxPython 3.0.2.0"
    Start-Process $WXInstaller -Arg "/VerySilent /NoRestart /NoCancel /SupressMessageBoxes /Silent /dir=$SitePackages" -NoNewWindow -Wait
    "       Done"

    "  ---- Installing py2exe 0.6.9"
    easy_install --always-unzip --quiet $Py2ExeInstaller
    "       Done."

    # *See Changes* PipInstall "pycrypto 2.6.1" "pycrypto==2.6.1"
    PipInstall "pycryptodome 3.6.6" "pycryptodome==3.6.6"

    PipInstall "wheel 0.29.0" "wheel==0.29.0"

    # sphinx >= 1.4.9 installs jinja2 >= 2.3 as dependency,
    # jinja2 >= 2.9 has an async module which py2exe has
    # problems with (build of eg will fail)
    PipInstall "jinja2 2.8.1" "jinja2==2.8.1"
    PipInstall "sphinx 1.5.6" "sphinx==1.5.6"

    PipInstall "commonmark 0.7.3" "commonmark==0.7.3"
    PipInstall "pillow 3.4.2" "pillow==3.4.2"
    PipInstall "comtypes 1.1.3" "https://github.com/enthought/comtypes/archive/1.1.3.zip"

    # *See Changes* PipInstall "ctypeslib 0.5.6" "svn+http://svn.python.org/projects/ctypes/trunk/ctypeslib/#ctypeslib=0.5.6"

    PipInstall "paramiko 2.2.1" "paramiko==2.2.1"
    PipInstall "pywin32 223" "pywin32==223"

    If (Test-Path $PythonDLL) {
        Copy-Item $PythonDLL -Destination $Env:PYTHON
        Remove-Item $PythonDLL
    }

} else {
    # we are already using a cached version so
    # there is no need to cache it agian.
    $env:APPVEYOR_CACHE_SKIP_SAVE = "true"
}
'
    matrix:
        - platform: x86
            PYTHON: C:\Stackless27
            PYTHONPATH: C:\Stackless27;C:\Stackless27\Scripts;C:\Stackless27\DLLs;C:\Stackless27\Lib;C:\Stackless27\Lib\site-packages;
            STACKLESSINSTALLER: python-2.7.12150-stackless.msi
            WXINSTALLER: wxPython3.0-win32-3.0.2.0-py27.exe
            PY2EXEINSTALLER: py2exe-0.6.9.win32-py2.7.exe
            PYTHONDLL: \SysWOW64\python27.dll
            OUTPUTFILE: Setup.exe
            LOGFILE: Build_x86.log
        - platform: x64
            PYTHON: C:\Stackless27x64
            PYTHONPATH: C:\Stackless27x64;C:\Stackless27x64\Scripts;C:\Stackless27x64\DLLs;C:\Stackless27x64\Lib;C:\Stackless27x64\Lib\site-packages;
            STACKLESSINSTALLER: python-2.7.12150.amd64-stackless.msi
            WXINSTALLER: wxPython3.0-win64-3.0.2.0-py27.exe
            PY2EXEINSTALLER: py2exe-0.6.9.win64-py2.7.amd64.exe
            PYTHONDLL: \System\python27.dll
            OUTPUTFILE: Setup_x64.exe
            LOGFILE: Build_x64.log


#init:
#  # Enable Remotedesktop and pause the build execution
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))


matrix:
  fast_finish: true


cache:
    # Invalidate cache if .appveyor.yml has changed
    - C:\Stackless27 -> .appveyor.yml
    - C:\Stackless27x64 -> .appveyor.yml
    # Manually clear cache:
    # from agithub.AppVeyor import AppVeyor
    # ci = AppVeyor(<your appveyor API token>)
    # status, data = ci.api.projects.<appveyor username>.<appveyor projectname>.buildcache.delete()
    # print status  # 204 = Ok, cache deleted


install:
    # HTML Help Workshop 1.32
    - cinst html-help-workshop

    # Microsoft Visual C++ Redistributable 2008 (version min: 9.0.21022.8)
    # - cinst vcredist2008

    #- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
    Invoke-Expression "& $Env:INSTALLSCRIPT"

build_script:
    ps: |
        # Invoke-Expression "& $Env:BuildScript"
        
        "=============== Start the EventGhost build ==============="
        If ($Env:APPVEYOR_REPO_TAG.tolower() -eq "true" -and $Env:APPVEYOR_REPO_TAG_NAME.tolower().startswith("deploy")) {
            # to do a release, create a tag in the form "Deploy_VERSION"
            # VERSION must be a valid version string (without leading "v")
            # this tag will be deleted and a new release "vVERSION" created.
            git checkout -q master
            $release = $Env:APPVEYOR_REPO_TAG_NAME.split("_", 2)[1]
            $url = if($Env:SFTP_URL){" --docs --url $Env:SFTP_URL} else {""}

            "=================== Building deploy ====================="
            python "_build\Build.py" --build --package --release --version $release $url

        } else {
            "=================== Building WIP ===================="
            python "_build\Build.py" --build --package

        $Env:SetupExe = gci -recurse -filter "_build\output\*$Env:OUTPUTFILE" -name
        $Env:Logfile = $Env:LOGFILE

        if (-Not ($SetupExe -contains '*x64*')) {
            # update the appveyor build version to be the same as the EventGhost version
            $Start = $Env:SetupExe.IndexOf("_")
            $Length = $Env:SetupExe.LastIndexOf("_") - $Start
            $BuildVersion = $Env:SetupExe.Substring($Start + 1, $Length - 1)
            Update-AppveyorBuild -Version "$BuildVersion"
        }

        " "
        "=============== EventGhost build finished ================"
        " "


#after_test:
#  - cmd:  echo "=============== EventGhost build finished ==============="
#  # - cmd: START /WAIT %setup-exe% /VERYSILENT /SUPPRESSMSGBOXES /NOCLOSEAPPLICATIONS

artifacts:
    - path: _build\output\CHANGELOG.md
      name: CHANGELOG.md
    - path: _build\output\CHANGELOG_THIS_RELEASE.md
      name: CHANGELOG_THIS_RELEASE.md
    - path: _build\output\CHANGELOG_THIS_RELEASE.bb
      name: CHANGELOG_THIS_RELEASE.bb
    - path: _build\output\$(SetupExe)
      name: $(SetupExe)
    - path: _build\output\$(LogFile)
      name: $(LogFile)


notifications:
- provider: GitHubPullRequest
  template: >-
    [{{buildVersion}} {{status}}]({{buildUrl}}) (commit {{commitUrl}})

    Artifacts:

    {{#jobs}}
    {{#artifacts}}
    [{{name}}]({{permalink}})

    {{/artifacts}}
    {{/jobs}}

  on_build_success: true
  on_build_failure: true
  on_build_status_changed: false

- provider: Slack
  incoming_webhook:
    secure: DXo21MuJufndeGjaRDMxLgLo5yEaPf9uYg1YqrHPlfjsXUAzxRR2yGhCKcUwfLTT3gO192GKwkNAc52Y6TnxuKsNAgI+K5mBW40+6I9FOmU=

  template: >-
    <{{buildUrl}}|{{projectName}} {{buildVersion}} {{status}}>

    Commit <{{commitUrl}}|{{commitId}}> by {{commitAuthor}} on {{commitDate}}:

    Commit message: _{{commitMessage}}_


    Artifacts:

    {{#jobs}}{{#artifacts}}<{{permalink}}|{{name}}>

    {{/artifacts}}{{/jobs}}

  on_build_success: true
  on_build_failure: true
  on_build_status_changed: true



#on_finish:
#  # Enable Remotedesktop and pause the build execution
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))


# notifications:
#   - provider: GitHubPullRequest
#     template: "{{#passed}}:white_check_mark: [Setup.exe](https://ci.appveyor.com/api/buildjobs/$(APPVEYOR_JOB_ID)/artifacts/_build%2Foutput%2F$(setup-exe)){{/passed}}{{#failed}}:x:{{/failed}} [Build {{&projectName}} {{buildVersion}} {{status}}]({{buildUrl}}) (commit {{commitUrl}} by @{{&commitAuthorUsername}})"
